name: Qt CI/CD

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
    build:
      strategy:
        matrix:
          os: [windows-latest]
      runs-on: ${{ matrix.os }}
      steps:
        - name: Checkout code
          uses: actions/checkout@v4

        - name: Install Qt
          uses: jurplel/install-qt-action@v3
          with:
            version: 6.5.3
            arch:  win64_msvc2019_64
            # dir: D:\Qt\6.5.3\msvc2019_64

        - name: Set up Visual Studio environment
          uses: microsoft/setup-msbuild@v1.3.1
        
        - name: Configure Qt Environment
          shell: pwsh
          run: |
            # Set Qt environment variables
            echo "QTDIR=D:\Qt\6.5.3\msvc2019_64" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
            echo "PATH=D:\Qt\6.5.3\msvc2019_64\bin;$env:PATH" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

            - name: Prepare Build Directory
            shell: pwsh
            run: |
              if (Test-Path -Path "${{ github.workspace }}/build") {
                Remove-Item -Path "${{ github.workspace }}/build" -Recurse -Force
              }
              New-Item -ItemType Directory -Path "${{ github.workspace }}/build"
            
        - name: Configure Project
          shell: pwsh
          run: |
            cd ${{ github.workspace }}\build
            & "D:\Qt\6.5.3\msvc2019_64\bin\qmake.exe" ..
        
        - name: Build Project
          shell: pwsh
          run: |
            cd ${{ github.workspace }}/build
            & "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.37.32822\bin\Hostx64\x64\nmake.exe"
        
        - name: Run Tests
          shell: pwsh
          run: |
            cd ${{ github.workspace }}/build
            .\release\huehnerManager.exe
        
        - name: Package Artifacts
          if: runner.os == 'Windows' && github.ref == 'refs/heads/main'
          shell: pwsh
          run: |
            mkdir release
            Copy-Item "${{ github.workspace }}/build/release/huehnerManager.exe" -Destination "release/"
            Compress-Archive -Path release/* -DestinationPath huehnerManager-Windows.zip
        
        - name: Upload Release
          if: runner.os == 'Windows' && github.ref == 'refs/heads/main'
          uses: softprops/action-gh-release@v1
          with:
            files: huehnerManager-Windows.zip
            tag_name: v${{ github.sha }}
